package handlers

import (
	"G-PROJECT/database"
	"G-PROJECT/middleware"
	"G-PROJECT/models"
	"G-PROJECT/utils"
	"net/http"
	"time"

	_ "G-PROJECT/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-gonic/gin"
	// swagger embed files
)

// LoginHandler handles user login
// @Summary User login
// @Description Authenticate user with username and password
// @Tags auth
// @Accept  json
// @Produce  json
// @Param body body models.LoginRequest true "Login request object"
// @Success 200 {object} models.LoginResponse "User logged in successfully"
// @Failure 401 {string} string "Unauthorized"
// @Router /login [post]

func init() {
	var err error
	dbInstance, err = database.NewDatabase()
	if err != nil {
		panic(err)
	}
}

func LoginHandler(c *gin.Context) {
    var loginRequest models.LoginRequest
    if err := c.BindJSON(&loginRequest); err != nil {
        c.Set("error", middleware.CustomError{
            Type:    middleware.UNABLE_TO_READ,
            Message: "Invalid input",
        })
        return
    }

    storedUser, err := dbInstance.GetUserByUsername(loginRequest.Username)
    if err != nil || storedUser == nil || !utils.ComparePasswords(storedUser.Password, loginRequest.Password) {
        c.Set("error", middleware.CustomError{
            Type:    middleware.UNABLE_TO_FIND_RESOURCE,
            Message: "Unauthorized",
        })
        return
    }

    if storedUser == nil || !utils.ComparePasswords(storedUser.Password, loginRequest.Password) {
        c.Set("error", middleware.CustomError{
            Type:    middleware.UNAUTHORIZED,
            Message: "Could not generate token!",
        })
        return
    }

    tokenString, err := utils.GenerateToken(*storedUser)
    if err != nil {
        c.Set("error", middleware.CustomError{
            Type:    middleware.UNABLE_TO_SAVE,
            Message: err.Error(),
        })
        return
    }

    c.SetCookie("token", tokenString, int(time.Now().Add(3*time.Minute).Unix()), "/", "", true, true)

	c.JSON(http.StatusOK, models.LoginResponse{
		Message: "User successfully logged in!",
		Token:   tokenString,
		User:    storedUser.Username,
	})
}
