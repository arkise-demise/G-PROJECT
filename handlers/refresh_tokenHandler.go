package handlers

import (
	"G-PROJECT/database"
	"G-PROJECT/middleware"
	"G-PROJECT/models"
	"G-PROJECT/utils"
	"net/http"
	"time"

	_ "G-PROJECT/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-gonic/gin"
	// swagger embed files
)

// RefreshTokenHandler refreshes JWT token
// @Summary Refresh JWT token
// @Description Refresh an expired JWT token
// @Tags auth
// @Accept  json
// @Produce  json
// @Param body body models.RefreshTokenRequest true "Refresh token request object"
// @Success 200 {string} string "Token refreshed successfully"
// @Failure 401 {string} string "Unauthorized"
// @Router /refresh-token [post]

func init() {
	var err error
	dbInstance, err = database.NewDatabase()
	if err != nil {
		panic(err)
	}
}

func RefreshTokenHandler(c *gin.Context) {
	var request models.RefreshTokenRequest

	if err := c.BindJSON(&request); err != nil {
		c.Set("error", middleware.CustomError{
			Type:    middleware.UNABLE_TO_READ,
			Message: "Unable to read request",
		})
		return
	}

	// Verify the username and password
	storedUser, err := dbInstance.GetUserByUsername(request.Username)
	if err != nil || storedUser == nil {
		c.Set("error", middleware.CustomError{
			Type:    middleware.UNABLE_TO_FIND_RESOURCE,
			Message: "User not found",
		})
		return
	}

	// Compare the provided password with the stored password
	if !utils.ComparePasswords(storedUser.Password, request.Password) {
		c.Set("error", middleware.CustomError{
			Type:    middleware.UNAUTHORIZED,
			Message: "Invalid username or password",
		})
		return
	}

	// Generate a new token for the user
	tokenString, err := utils.GenerateToken(*storedUser)
	if err != nil {
		c.Set("error", middleware.CustomError{
			Type:    middleware.UNABLE_TO_SAVE,
			Message: "Unable to generate token",
		})
		return
	}

	// Set the new token in the response
	c.SetCookie("token", tokenString, int(time.Now().Add(3*time.Minute).Unix()), "/", "", true, true)
	c.JSON(http.StatusOK, gin.H{
        "message": "Token refreshed successfully!",
        "token":tokenString,
        "User":    storedUser.Username,
    })
}

